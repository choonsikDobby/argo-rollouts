# This example demonstrates a Rollout using the canary update strategy with a customized rollout
# plan. The prescribed steps initially sets a canary weight of 20%, then pauses indefinitely. Once
# resumed, the rollout performs a gradual, automated 20% weight increase until it reaches 100%.
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: rollout-canary
spec:
  replicas: 5
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: rollout-canary
  template:
    metadata:
      labels:
        app: rollout-canary
    spec:
      containers:
      - name: rollouts-demo
        image: argoproj/rollouts-demo:yellow
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
  strategy:
    canary:
      # 내가 제어할 서비스들의 이름을 명시
      stableService: canary-demo
      canaryService: canary-demo-canary
      steps:
      - setWeight: 20
      # The following pause step will pause the rollout indefinitely until manually resumed.
      # Rollouts can be manually resumed by running `kubectl argo rollouts promote ROLLOUT`
      - pause: {}
      - setWeight: 40
      - pause: {duration: 40s}
      - setWeight: 60
      - pause: {duration: 20s}
      - setWeight: 80
      - pause: {duration: 20s}

---
# services.yaml

# 1. Stable Service: 실제 사용자가 접근하는 서비스
apiVersion: v1
kind: Service
metadata:
  name: canary-demo # Rollout의 stableService 필드와 이름이 일치해야 함
spec:
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: rollout-canary # 이 selector를 통해 파드를 찾음

---
# 2. Canary Service: 테스트 및 관찰용 서비스
apiVersion: v1
kind: Service
metadata:
  name: canary-demo-canary # Rollout의 canaryService 필드와 이름이 일치해야 함
spec:
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: rollout-canary # 이 selector 또한 Rollouts 컨트롤러가 동적으로 관리함
